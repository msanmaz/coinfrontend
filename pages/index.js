import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import {
  Table,
  Thead,
  Tbody,
  Tfoot,
  Tr,
  Th,
  Td,
  TableCaption,
  TableContainer,
  Input,
  Stack,
} from '@chakra-ui/react'
import { useEffect, useState } from 'react'
import socketIOClient from "socket.io-client";
import Nav from '../components/Navbar'
import WithBackgroundImage from '../components/Hero'
import Carousel from '../components/Carousel'
import Cache from '../public/cache.json'

const carouseldata = Cache.data





export default function Home() {


  const [crypto, setCrypto] = useState([])
  const [searchInput, setSearchInput] = useState('')
  const [filteredResults, setFilteredResults] = useState([]);


  useEffect(() => {
    const socket = socketIOClient('https://polar-taiga-09455.herokuapp.com/');
    socket.on("data", data => {
      setCrypto(data)
    });

  }, []);

  console.log(crypto)
  const searchItems = (searchValue) => {
    setSearchInput(searchValue)
    if (searchInput !== '') {
      const filteredData = crypto.data.filter((item) => {
        return Object.values(item.name).join('').toLowerCase().includes(searchInput.toLowerCase())
      })
      setFilteredResults(filteredData)
    }
    else {
      setFilteredResults(crypto.data)
    }
  }


  return (
    <div className='min-h-screen w-full'>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Nav />
      <WithBackgroundImage />
      <Carousel posts={carouseldata} />


      <Stack py={4} justifyContent={'center'} alignItems='center'>
        <Input onChange={(e) => searchItems(e.target.value)} w='50%' placeholder='Search Crypto' />

      </Stack>

      <TableContainer px={4}>
        <Table variant='simple'>
          <TableCaption>Imperial to metric conversion factors</TableCaption>
          <Thead>
            <Tr>
              <Th>Rank</Th>
              <Th>Name</Th>
              <Th>Price</Th>
              <Th isNumeric>24H Change</Th>
              <Th isNumeric>Market Cap</Th>
            </Tr>
          </Thead>
          <Tbody>
            {searchInput.length >= 1 ? (filteredResults.map((item) => {
              return <Tr key={item.id}>
                <Td>{item.rank}</Td>
                <Td>{item.name}</Td>
                <Td >{item.priceUsd.substring(0, 10)} $</Td>
                <Td isNumeric color={item.changePercent24Hr <= 0 ? 'red.400' : 'green.500'}>{item.changePercent24Hr.substring(0, 5)}%</Td>
                <Td isNumeric>{item.marketCapUsd.substring(0, 5)}B</Td>
              </Tr>
            })
            ) : (
              crypto.data?.map((item) => {
                return <Tr key={item.id}>
                  <Td>{item.rank}</Td>
                  <Td>{item.name}</Td>
                  <Td color={item.priceUsd >= item.priceUsd} >{item.priceUsd.substring(0, 10)} $</Td>
                  <Td isNumeric color={item.changePercent24Hr <= 0 ? 'red.400' : 'green.500'}>{item.changePercent24Hr.substring(0, 5)}%</Td>
                  <Td isNumeric>{item.marketCapUsd.substring(0, 5)}B</Td>
                </Tr>
              })
            )}



          </Tbody>
        </Table>
      </TableContainer>





    </div>
  )
}
